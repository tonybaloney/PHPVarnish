<?php
/**
 * Varnish Management
 *
 * This is the varnish management class for connecting to varnish and controlling varnish
 * @author Anthony Shaw <anthony.p.shaw@gmail.com>
 * @version 1.0
 * @package Varnish
 */


/**
 * This is the VarnishManagement class
 * @package Varnish
 */
class VarnishManagement {
	var $host ;
	var $port ;
	var $last_error;
	var $result;
	var $debug;

  /**
   * Construct the class
   * @param string $host
   * @param integer $port
   * @param bool $debug
   */
	function __construct ( $host , $port , $debug=false) {
		$this->host=$host;
		$this->port=$port;	
		$this->debug=$debug;
	}
	
	/** 
	 * Iterates through an array and removes empty entries
	 * @param array array
	 * @return array
	 */
	private function RemoveGaps( $array ) {
		$new = array();
		foreach ($array as $item){
			if( trim($item) != '')
				$new[] = $item;
		}
		return $new;
	}

	/**
   * Attempts to load the config by name
   * returns true on success, false on failure
   * @param string $name
   * @param string $filename
   * @return bool
   */
	public function LoadConfig ($name, $filename){
		return $this->SendCommand("vcl.load $name $filename\n");
	}
	
	/**
   * Attempts to use the config by name
   * returns true on success, false on failure
   * @param string $name
   * @return bool
   */
	public function UseConfig ($name){
		return $this->SendCommand("vcl.use $name\n");
	}
	
	/**
   * Attempts to list the configs on the system
   * returns a list of config arrays.
   * @return array
   */
	public function ListConfigs (){
		$this->SendCommand("vcl.list\n");
		$con = $this->result;
		$con_list = explode("\n",trim($con));
		$configs = array();
    		foreach ($con_list as $config_item){
			$conf_raw = $this->RemoveGaps(explode(' ',$config_item));
			$conf['status'] = $conf_raw[0];
			$conf['name'] = $conf_raw[2];
			$configs[] = $conf;
    		}
		return $configs;		
	}
	
	/**
   * Attempts to show a config by name
   * returns true on success, false on failure
   * @param string $config_name
   * @return bool
   */
	public function ShowConfig ($config_name) {
		$this->SendCommand("vcl.show $config_name\n");		
		return $this->result;
	}
	
	/**
   * Attempts to get the running config
   * returns true on success, false on failure
   * @return bool
   */
	public function GetRunningConfig () {
    		$configs = $this->ListConfigs();
    		foreach ($configs as $con){
			if ($con['status'] == 'active'){
				return $this->ShowConfig($con['name']);
			}
		}
	}
	
	/**
	 * Gets the name of the current configuration, names are generated by varnish
	 * @return string
	 */
	public function GetRunningConfigName () {
    		$configs = $this->ListConfigs();
    		foreach ($configs as $con){
			if ($con['status'] == 'active'){
				return $con['name'];
			}
		}
	}
	
  /**
   * Returns the stats from the server
   * returns a list of stats.
   * @return array
   */
	public function GetStats() {
		$this->SendCommand ("stats\n");
		$con = $this->result;
		$con_list = explode("\n",trim($con));
		$configs = array();
		foreach ($con_list as $config_item){
			$conf_raw = $this->RemoveGaps(explode(' ',$config_item));
			$configs[$conf_raw[1]] = $conf_raw[0];
		}
		return $configs;
	}

	/**
   * Send a command to the varnish management port
   * returns true on success(200), false on failure
   * @param string $string
   * @return bool
   */
	private function SendCommand ($string){
		$this->result='';
		if ($this->debug) echo "Sending command '$string' to $this->host\n";
		$f = fsockopen($this->host, $this->port, $errno, $errstr);
		if ($f)
		{
		  fwrite($f, $string);
		  $result = fread($f,3);
			$res_len = trim(fgets($f));
			if ($this->debug) echo "Receiving response of $res_len.";
			$c = 0;
			while (1==1) {
        			$buffer = fgets($f);
				$c += strlen($buffer);
        			if ($c <= $res_len) {
					$this->result .= $buffer;
    				} else {
					if ($this->debug) echo "Received :".$this->result;
					fclose($f);
					return true;
				}
			}
		  if ($result != "200"){ 
			$this->last_error = $this->result;
			fclose($f);
			return false;
		  }else{
		  	fclose($f);
		  	return true;
		  }
		} else { 
			$this->last_error = "Could not connect to management, $errstr ($errno).";
			return false;
		}
		return false;
	}
	
	/**
   * Returns the last error message
   * @return bool
   */
	public function LastError() {
		switch ($this->last_error){
			case 106: return "Compilation error";
			default: return $this->last_error;
		}
	}
}

